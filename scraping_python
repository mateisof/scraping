import sys
import requests
from bs4 import BeautifulSoup
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QLabel, QMenuBar, QAction


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Inițializarea meniului
        self.menu_bar = QMenuBar(self)
        self.menu_bar.setGeometry(0, 0, 100, 20)

        # Adăugarea butoanelor în meniu
        weather_action = QAction("Vreme", self)
        weather_action.triggered.connect(self.show_weather_window)
        self.menu_bar.addAction(weather_action)

        sport_action = QAction("Sport", self)
        sport_action.triggered.connect(self.show_sport_window)
        self.menu_bar.addAction(sport_action)

        self.setMenuBar(self.menu_bar)

        # Inițializarea ferestrei de vreme
        self.weather_window = WeatherWindow()

        # Inițializarea layout-ului principal
        self.layout = QVBoxLayout()
        self.layout.addWidget(self.menu_bar)
        self.layout.addWidget(self.weather_window)

        # Setarea layout-ului principal
        central_widget = QWidget()
        central_widget.setLayout(self.layout)
        self.setCentralWidget(central_widget)

        self.setWindowTitle("Exemplu PyQt")

    def show_weather_window(self):
        self.layout.replaceWidget(self.weather_window, WeatherWindow())
        self.weather_window.deleteLater()
        self.weather_window = WeatherWindow()
        self.layout.addWidget(self.weather_window)

    def show_sport_window(self):
        # Logica pentru afișarea ferestrei de sport
        pass


class WeatherWindow(QWidget):
    def __init__(self):
        super().__init__()

        # Inițializarea câmpului de căutare
        self.search_bar = QLineEdit()
        self.search_bar.setPlaceholderText("Introduceți orașul")
        self.search_bar.returnPressed.connect(self.get_weather_info)

        # Inițializarea etichetelor pentru temperatura de azi și de mâine
        self.today_label = QLabel()
        self.tomorrow_label = QLabel()

        # Inițializarea layout-ului
        layout = QVBoxLayout()
        layout.addWidget(self.search_bar)
        layout.addWidget(self.today_label)
        layout.addWidget(self.tomorrow_label)

        self.setLayout(layout)

    def get_weather_info(self):
        city = self.search_bar.text()

        # Obținerea informațiilor despre vreme de pe site-ul https://meteotrend.com/
        # Logica de scraping a site-ului și actualizarea etichetelor cu temperaturile

        # Exemplu: Obținerea temperaturilor de azi și de mâine dintr-un API fictiv
        today_temp = 25
        tomorrow_temp = 28

        self.today_label.setText(f"Temperatura de azi în {city}: {today_temp} °C")
        self.tomorrow_label.setText(f"Temperatura de mâine în {city}: {tomorrow_temp} °C")


if __name__ == "__main__":
    app = QApplication(sys.argv)

    window = MainWindow()
    window.setGeometry(100, 100, 500, 400)
    window.show()

    sys.exit(app.exec_())
